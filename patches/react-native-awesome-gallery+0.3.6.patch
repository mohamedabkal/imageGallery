diff --git a/node_modules/react-native-awesome-gallery/src/index.tsx b/node_modules/react-native-awesome-gallery/src/index.tsx
index c2826e3..ce9a932 100644
--- a/node_modules/react-native-awesome-gallery/src/index.tsx
+++ b/node_modules/react-native-awesome-gallery/src/index.tsx
@@ -23,6 +23,7 @@ import Animated, {
   runOnJS,
   withSpring,
   cancelAnimation,
+  Easing,
 } from 'react-native-reanimated';
 import { Gesture, GestureDetector } from 'react-native-gesture-handler';
 import { useVector } from 'react-native-redash';
@@ -33,6 +34,8 @@ const rtl = I18nManager.isRTL;
 const DOUBLE_TAP_SCALE = 3;
 const MAX_SCALE = 6;
 const SPACE_BETWEEN_IMAGES = 40;
+const DEFAULT_SCALE = 1
+const MIN_SCALE = 0
 
 type Dimensions = {
   height: number;
@@ -114,6 +117,7 @@ type Props<T> = EventsCallbacks & {
   onScaleChangeRange?: { start: number; end: number };
 
   setRef: (index: number, value: ItemRef) => void;
+  setContainerOpacity: (value:number) => void;
 };
 
 const springConfig = {
@@ -158,6 +162,7 @@ const ResizableImage = React.memo(
     onScaleChange,
     onScaleChangeRange,
     setRef,
+    setContainerOpacity
   }: Props<T>) => {
     const CENTER = {
       x: width / 2,
@@ -549,7 +554,7 @@ const ResizableImage = React.memo(
           cancelAnimation(offset.y);
         }
       })
-      .onStart(({ velocityY, velocityX }) => {
+      .onStart(({ velocityY, velocityX, }) => {
         'worklet';
         if (!isActive.value) return;
 
@@ -642,7 +647,14 @@ const ResizableImage = React.memo(
         }
 
         if (isVertical.value && newHeight <= height) {
-          const destY = translationY + velocityY * 0.2;
+          const destY = translationY + velocityY * 0.2
+
+          const scaledValue = Math.abs(destY) / height; // Linear interpolation
+          const newScale = scaledValue < 0 ? 0 : DEFAULT_SCALE - scaledValue 
+
+          scale.value = withTiming(newScale,{duration:150}) // change image scale
+          setContainerOpacity(newScale)
+
           shouldClose.value = disableSwipeUp
             ? destY > 220
             : Math.abs(destY) > 220;
@@ -733,6 +745,9 @@ const ResizableImage = React.memo(
           });
           runOnJS(onSwipeToClose)();
           return;
+        } else {
+          scale.value < 1 ? scale.value = withTiming(1,{duration:150}):null;
+          setContainerOpacity(1)
         }
 
         if (newHeight > height) {
@@ -991,8 +1006,19 @@ const GalleryComponent = <T extends any>(
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [data?.length, dimensions.width]);
 
+  const containerOpacity = useSharedValue(1);
+
+  const animatedContainerStyle = useAnimatedStyle(()=>({
+    backgroundColor: `rgba(0, 0, 0, ${containerOpacity.value})`
+  }));
+
+  const setContainerOpacity = (value:number) => {
+    'worklet';
+    containerOpacity.value = withSpring(value)
+  }
+
   return (
-    <View style={[styles.container, style]}>
+    <Animated.View style={[styles.container, style, animatedContainerStyle]}>
       <Animated.View style={[styles.rowContainer, animatedStyle]}>
         {data.map((item: any, i) => {
           const isFirst = i === 0;
@@ -1043,6 +1069,7 @@ const GalleryComponent = <T extends any>(
                     onScaleChange,
                     onScaleChangeRange,
                     setRef,
+                    setContainerOpacity,
                     ...eventsCallbacks,
                     ...dimensions,
                   }}
@@ -1052,7 +1079,7 @@ const GalleryComponent = <T extends any>(
           );
         })}
       </Animated.View>
-    </View>
+    </Animated.View>
   );
 };
 
@@ -1062,7 +1089,7 @@ const Gallery = React.forwardRef(GalleryComponent) as <T extends any>(
 
 const styles = StyleSheet.create({
   container: { flex: 1, backgroundColor: 'black' },
-  rowContainer: { flex: 1, flexDirection: 'row' },
+  rowContainer: { flex: 1, flexDirection: 'row', },
   activeItem: { zIndex: 1 },
   inactiveItem: { zIndex: 0 },
 });
